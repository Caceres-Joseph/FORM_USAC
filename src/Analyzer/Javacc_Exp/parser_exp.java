/* Generated By:JavaCC: Do not edit this line. parser_exp.java */
package Analyzer.Javacc_Exp;
import java.io.InputStream;
import Analyzer.Tree.Tablas.tablaSimbolos;
import readExcel.cell;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
public class parser_exp implements parser_expConstants {
    public tablaSimbolos tablaSimbolos;
    public String cadenaSalida="";
    public static cell celda=new cell("");
    /*
    |-------------------------
    | tipo
    | 0=desconocido
    | 1=entero
    | 2=decimal
    | 3=booleano
    |-------------------------
    */
    public static int tipo=0;
    public static HashMap<String, cell> tempLstParametros;
    public parser_exp(){

    }

    public void inicializar(tablaSimbolos tabla,InputStream stream, cell celda ){

        try{

                parser_exp analizador =new parser_exp(stream);
                this.tablaSimbolos=tabla;
                this.celda=celda;
                this.tempLstParametros=new LinkedHashMap<String, cell>();
                cadenaSalida=analizador.Programa(tabla);

                //this.println("[parser_exp]Analisis  exitoso! :)");

            }
        catch(ParseException e){
            this.error(e, tablaSimbolos);
            //tablaSimbolos.tablaErrores.println(e);
            /* raiz.tablaSimbolos.tablaErrores.insertErrorSemantic("",0,0,e.getMessage());
            raiz.tablaSimbolos.tablaErrores.println("Error en el parser_exp"); */

        }


    }

    public HashMap<String, String> initParametro(tablaSimbolos tabla,InputStream stream, cell celda){
        HashMap<String, String> retorno=new LinkedHashMap<String, String>();
        try{

                parser_exp analizador =new parser_exp(stream);
                this.tablaSimbolos=tabla;
                this.celda=celda;
                this.tempLstParametros=new LinkedHashMap<String, cell>();
                retorno=analizador._Parametro(tabla);
                cadenaSalida="param";
                this.println("[parser_exp_multim]Analisis  exitoso! :)");

            }
        catch(ParseException e){
            this.error(e, tablaSimbolos);

        }
        return retorno;
    }

    public void error_skipto(int kind) {
        ParseException e = generateParseException();  // generate the exception object.
        System.out.println(e.toString());  // print the error message
        Token t;
        int cont=0;
        do {
            t = getNextToken();
        } while (t.kind != kind && t.kind != EOF);
    }

    public void error(ParseException e, tablaSimbolos tabla){

        //tabla.tablaErrores.println("Error en el parser_exp, Recuperandose");
        int maxSize = 0;
        String cadenaEsperaba="";
        for (int i = 0; i < e.expectedTokenSequences.length; i++) {
            if (maxSize < e.expectedTokenSequences[i].length) {
                maxSize = e.expectedTokenSequences[i].length;
            }
            for (int j = 0; j < e.expectedTokenSequences[i].length; j++) {
                int indice=e.expectedTokenSequences[i][j];


                if(e.tokenImage[indice].contains("EOF")){
                    //tabla.tablaErrores.insertErrorSyntax("encuesta",-2,-2,"No se encontrÃ³ fila de finalizacion"); 
                }else{
                    cadenaEsperaba+=","+e.tokenImage[indice];
                   // tabla.tablaErrores.insertErrorSyntax("encuesta",-2,-2,e.getMessage()); 
                    //tabla.tablaErrores.println("Se esperaba:"+e.tokenImage[indice]);

                }

            }
        }
        tabla.tablaErrores.insertErrorSyntax(celda.ambito,celda.posY,celda.posX,"Se esperaba alguno de los siguientes tokens->"+cadenaEsperaba);


        //System.out.println(e);
    }


    public void println(Object mensaje){
        tablaSimbolos.tablaErrores.println(mensaje);
    }
    public void print(Object mensaje){
        tablaSimbolos.tablaErrores.print(mensaje);
    }

    public static void imprimirToken(String t){
        //System.out.println(t);
        //tablaSimbolos.tablaErrores.println(t);
    }

        /*
        +-------------------------+
        |   Cadena
        */


/* MORE : {
    <inicio : "\"" > :s2
}

<s2> MORE :
{
    <cual : (~[])>
}
<s2> TOKEN :
{
    <tString : "\""  >{parser_exp.imprimirToken("tString->"+image); } : DEFAULT
}
 */





    /*
    |--------------------------------------------------------------------------
    | GRAMATICA
    |-------------------------------------------------------------------------- 
    */

        /*
        +-------------------------+
        |   Programa
        */
  final public String Programa(tablaSimbolos tabla) throws ParseException {
    String retorno="";
    retorno = S(tabla);
    jj_consume_token(0);
         {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

        /*
        +-------------------------+
        |   S
        */
  final public String S(tablaSimbolos tabla) throws ParseException {
    String retorno="";
    retorno = E(tabla);
         {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public String E(tablaSimbolos tabla) throws ParseException {
    String retorno="";
    retorno = OR(tabla);
     {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public String OR(tablaSimbolos tabla) throws ParseException {
    String retorno="";
    String tempString1;
    String tempString2;
    tempString1 = AND(tabla);
            retorno+=tempString1;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tOr:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(tOr);
      tempString2 = AND(tabla);
            retorno+=" || "+tempString2;
            parser_exp.tipo=3;
            /* System.out.println("[OR]"+retorno); */

    }
     {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public String AND(tablaSimbolos tabla) throws ParseException {
    String retorno="";
    String tempString1;
    String tempString2;
    tempString1 = IGUALACION(tabla);
            retorno+=tempString1;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tAnd:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(tAnd);
      tempString2 = IGUALACION(tabla);
            retorno+=" && "+tempString2;
            parser_exp.tipo=3;
             /* System.out.println("[AND]"+retorno); */

    }
     {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public String IGUALACION(tablaSimbolos tabla) throws ParseException {
    String retorno="";
    String tempString1;
    String tempString2;
    tempString1 = DIFERENCIACION(tabla);
            retorno+=tempString1;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tIgual:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(tIgual);
      tempString2 = DIFERENCIACION(tabla);
            retorno+=" == "+tempString2;
            parser_exp.tipo=3;
           /*  System.out.println("[IGUALACION]"+retorno); */

    }
     {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public String DIFERENCIACION(tablaSimbolos tabla) throws ParseException {
    String retorno="";
    String tempString1;
    String tempString2;
    tempString1 = MENOR_QUE(tabla);
            retorno+=tempString1;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tDiferente:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      jj_consume_token(tDiferente);
      tempString2 = MENOR_QUE(tabla);
            retorno+=" != "+tempString2;
            parser_exp.tipo=3;
            /* System.out.println("[DIFERENCIACION]"+retorno); */

    }
     {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public String MENOR_QUE(tablaSimbolos tabla) throws ParseException {
    String retorno="";
    String tempString1;
    String tempString2;
    tempString1 = MENOR_IGUALQUE(tabla);
            retorno+=tempString1;
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tMenorQue:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_5;
      }
      jj_consume_token(tMenorQue);
      tempString2 = MENOR_IGUALQUE(tabla);
            retorno+=" < "+tempString2;
            parser_exp.tipo=3;
            /* System.out.println("[MENOR_QUE]"+retorno); */

    }
     {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public String MENOR_IGUALQUE(tablaSimbolos tabla) throws ParseException {
    String retorno="";
    String tempString1;
    String tempString2;
    tempString1 = MAYOR_QUE(tabla);
            retorno+=tempString1;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tMenorIgualQue:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_6;
      }
      jj_consume_token(tMenorIgualQue);
      tempString2 = MAYOR_QUE(tabla);
            retorno+=" <= "+tempString2;
            parser_exp.tipo=3;
           /*  System.out.println("[MENOR_IGUALQUE]"+retorno); */

    }
     {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public String MAYOR_QUE(tablaSimbolos tabla) throws ParseException {
    String retorno="";
    String tempString1;
    String tempString2;
    tempString1 = MAYOR_IGUALQUE(tabla);
            retorno+=tempString1;
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tMayorQue:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_7;
      }
      jj_consume_token(tMayorQue);
      tempString2 = MAYOR_IGUALQUE(tabla);
            retorno+=" > "+tempString2;
            parser_exp.tipo=3;
            /* System.out.println("[MAYOR_QUE]"+retorno); */

    }
     {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public String MAYOR_IGUALQUE(tablaSimbolos tabla) throws ParseException {
    String retorno="";
    String tempString1;
    String tempString2;
    tempString1 = RES(tabla);
            retorno+=tempString1;
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tMayorIgualQue:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_8;
      }
      jj_consume_token(tMayorIgualQue);
      tempString2 = RES(tabla);
            retorno+=" >= "+tempString2;
            parser_exp.tipo=3;
            /* System.out.println("[MAYOR_IGUALQUE]"+retorno); */

    }
     {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

/*  String NEG(tablaSimbolos tabla) :
{
    String retorno="";
    String tempString1; 
}
{
    (
        <tResta>
        tempString1=RES(tabla) 
        {
            retorno+="-"+tempString1;
        }
    )+
        {
            System.out.println("[NEG]"+retorno);
            return retorno;
        }
    |

    tempString1=RES(tabla) 
        {
            retorno+=tempString1;
        }  

    {return retorno;}
}   */
  final public String RES(tablaSimbolos tabla) throws ParseException {
    String retorno="";
    String tempString1;
    String tempString2;
    tempString1 = SUM(tabla);
            retorno+=tempString1;
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tResta:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_9;
      }
      jj_consume_token(tResta);
      tempString2 = SUM(tabla);
            retorno+=" - "+tempString2;
            parser_exp.tipo=1;
            /* System.out.println("[RES]"+retorno); */

    }
     {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public String SUM(tablaSimbolos tabla) throws ParseException {
    String retorno="";
    String tempString1;
    String tempString2;
    tempString1 = MODULO(tabla);
            retorno+=tempString1;
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tSuma:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_10;
      }
      jj_consume_token(tSuma);
      tempString2 = MODULO(tabla);
            retorno+=" + "+tempString2;
            parser_exp.tipo=1;
            /* System.out.println("[SUM]"+retorno); */

    }
     {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public String MODULO(tablaSimbolos tabla) throws ParseException {
    String retorno="";
    String tempString1;
    String tempString2;
    tempString1 = DIV(tabla);
            retorno+=tempString1;
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tModulo:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_11;
      }
      jj_consume_token(tModulo);
      tempString2 = DIV(tabla);
            retorno+=" % "+tempString2;
            parser_exp.tipo=1;
            /* System.out.println("[MODULO]"+retorno); */

    }
     {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public String DIV(tablaSimbolos tabla) throws ParseException {
    String retorno="";
    String tempString1;
    String tempString2;
    tempString1 = POR(tabla);
            retorno+=tempString1;
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tDivision:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_12;
      }
      jj_consume_token(tDivision);
      tempString2 = POR(tabla);
            retorno+=" / "+tempString2;
            parser_exp.tipo=2;
            /* System.out.println("[DIV]"+retorno); */

    }
     {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public String POR(tablaSimbolos tabla) throws ParseException {
    String retorno="";
    String tempString1;
    String tempString2;
    tempString1 = NOT(tabla);
            retorno+=tempString1;
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tMultiplicacion:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_13;
      }
      jj_consume_token(tMultiplicacion);
      tempString2 = NOT(tabla);
            retorno+=" * "+tempString2;
            parser_exp.tipo=1;
            /* System.out.println("[POR]"+retorno); */

    }
     {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public String NOT(tablaSimbolos tabla) throws ParseException {
    String retorno="";
    String tempString1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tNot:
      label_14:
      while (true) {
        jj_consume_token(tNot);
        tempString1 = F(tabla);
            retorno+="!"+tempString1;
            parser_exp.tipo=3;
            /* System.out.println("[NOT]"+retorno); */

        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tNot:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_14;
        }
      }
         {if (true) return retorno;}
      break;
    case tPosicion:
    case tBoolean:
    case tNumero:
    case tIdentificador:
    case tFecha:
    case tHora:
    case tResta:
    case tPunto:
    case tAbreParent:
    case tNumeral:
    case tString:
    case tString2:
    case tString3:
      tempString1 = F(tabla);
            retorno+=tempString1;
     {if (true) return retorno;}
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String parentesis(tablaSimbolos tabla) throws ParseException {
    String retorno="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tAbreParent:
      jj_consume_token(tAbreParent);
      jj_consume_token(tCierraParent);
     {if (true) return retorno;}
      break;
    default:
      jj_la1[15] = jj_gen;
      epsilon();
        tabla.tablaErrores.insertErrorLexical(parser_exp.celda.ambito,parser_exp.celda.posY,parser_exp.celda.posX,"Para hacer referencia a una variable tiene que usar #[var]");
        {if (true) return retorno;}
    }
    throw new Error("Missing return statement in function");
  }

  final public String fechaHora(tablaSimbolos tabla) throws ParseException {
    String retorno="";
    Token temp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tHora:
      temp = jj_consume_token(tHora);
         retorno=" "+temp.image;
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
     {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  final public String F(tablaSimbolos tabla) throws ParseException {
    String cadenaSalida="";
    Token tnumero;
    Token identificador;
    String tempString="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tNumero:
      tnumero = jj_consume_token(tNumero);
            cadenaSalida=tnumero.image;
            {if (true) return cadenaSalida;}
      break;
    case tResta:
      jj_consume_token(tResta);
      tnumero = jj_consume_token(tNumero);
            cadenaSalida="-"+tnumero.image;
            {if (true) return cadenaSalida;}
      break;
    case tPosicion:
      jj_consume_token(tPosicion);
      jj_consume_token(tAbreParent);
      jj_consume_token(tDosPuntosSeguidos);
      jj_consume_token(tCierraParent);
            cadenaSalida="posicion(..)";
            {if (true) return cadenaSalida;}
      break;
    case tBoolean:
      tnumero = jj_consume_token(tBoolean);
            cadenaSalida=tnumero.image;
            {if (true) return cadenaSalida;}
      break;
    case tString:
      tnumero = jj_consume_token(tString);
            cadenaSalida=tnumero.image;
            {if (true) return cadenaSalida;}
      break;
    case tString2:
      tnumero = jj_consume_token(tString2);
            cadenaSalida=tnumero.image;
            {if (true) return cadenaSalida;}
      break;
    case tString3:
      tnumero = jj_consume_token(tString3);
            cadenaSalida=tnumero.image;
            {if (true) return cadenaSalida;}
      break;
    case tFecha:
      tnumero = jj_consume_token(tFecha);
      tempString = fechaHora(tabla);
            cadenaSalida=tnumero.image+tempString;
            {if (true) return cadenaSalida;}
      break;
    case tHora:
      tnumero = jj_consume_token(tHora);
            cadenaSalida=tnumero.image;
            {if (true) return cadenaSalida;}
      break;
    case tPunto:
      jj_consume_token(tPunto);
            cadenaSalida="param_1";
            {if (true) return cadenaSalida;}
      break;
    case tIdentificador:
      tnumero = jj_consume_token(tIdentificador);
      tempString = parentesis(tabla);
            cadenaSalida=tnumero.image+tempString;
            {if (true) return cadenaSalida;}
      break;
    case tNumeral:
      jj_consume_token(tNumeral);
      jj_consume_token(tAbreCorchete);
      tnumero = jj_consume_token(tIdentificador);
      jj_consume_token(tCierraCorchete);
            cadenaSalida=tnumero.image;
            parser_exp.tempLstParametros.put(cadenaSalida, parser_exp.celda);

            {if (true) return cadenaSalida;}
      break;
    case tAbreParent:
      jj_consume_token(tAbreParent);
      tempString = E(tabla);
      jj_consume_token(tCierraParent);
            cadenaSalida="("+tempString+")";
            {if (true) return cadenaSalida;}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

        /*
        +-------------------------+
        |   epsilon
        */
  final public void epsilon() throws ParseException {
        this.imprimirToken("epsilon");
  }

    /*
    |--------------------------------------------------------------------------
    | GRAMATICA
    |-------------------------------------------------------------------------- 
    */
  final public HashMap<String, String> _Parametro(tablaSimbolos tabla) throws ParseException {
    HashMap<String, String> temp=new LinkedHashMap<String, String>();
    CAD_MAX(tabla,temp);
     {if (true) return temp;}
    throw new Error("Missing return statement in function");
  }

  final public void CAD_MAX(tablaSimbolos tabla,HashMap<String, String> temp) throws ParseException {
    String exp="";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tCadMax:
      jj_consume_token(tCadMax);
      jj_consume_token(tIgual);
      exp = E(tabla);
      CAD_MAX(tabla,temp);
                temp.put("cad_max",exp);
                System.out.println("tcadMax:"+exp);
      break;
    case tCadMin:
      jj_consume_token(tCadMin);
      jj_consume_token(tIgual);
      exp = E(tabla);
      CAD_MAX(tabla,temp);
                temp.put("cad_min",exp);
                System.out.println("tCadMin:"+exp);
      break;
    case tCadFila:
      jj_consume_token(tCadFila);
      jj_consume_token(tIgual);
      exp = E(tabla);
      CAD_MAX(tabla,temp);
                temp.put("cad_fila",exp);
                System.out.println("tCadFila:"+exp);
      break;
    case tFinalizar:
      jj_consume_token(tFinalizar);
      jj_consume_token(tIgual);
      exp = E(tabla);
      CAD_MAX(tabla,temp);
                temp.put("finalizar",exp);
                System.out.println("tFinalizar:"+exp);
      break;
    case tOpcion:
      jj_consume_token(tOpcion);
      jj_consume_token(tIgual);
      jj_consume_token(tSiNO);
      CAD_MAX(tabla,temp);
                temp.put("opcion","si_no");
                System.out.println("tOpcion:si_no");
      break;
    default:
      jj_la1[18] = jj_gen;
      epsilon();
    }
  }

  /** Generated Token Manager. */
  public parser_expTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000000,0x2000000,0x80000,0x100000,0x800000,0x1000000,0x200000,0x400000,0x20000,0x10000,0x4,0x2,0x40000,0x8000000,0x1802d818,0x0,0x8000,0x1002d818,0x3e0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7a,0x2,0x0,0x7a,0x0,};
   }

  /** Constructor with InputStream. */
  public parser_exp(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public parser_exp(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new parser_expTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public parser_exp(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new parser_expTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public parser_exp(parser_expTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(parser_expTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[44];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 44; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
