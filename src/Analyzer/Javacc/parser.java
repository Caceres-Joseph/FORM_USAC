/* Generated By:JavaCC: Do not edit this line. parser.java */
package Analyzer.Javacc;
import java.io.InputStream;
import Analyzer.Tree.*;
import Analyzer.Tree.Nodes.*;
public class parser implements parserConstants {
    public tree arbol=new tree();

    public parser(){

    }

    public void inicializar(InputStream stream ){
        try{

                parser analizador =new parser(stream);

                arbol=analizador.Programa(arbol);

                this.println("Analisis  exitoso! :)");
            }
        catch(ParseException e){
            this.error(e, arbol);
            /* raiz.tablaSimbolos.tablaErrores.insertErrorSemantic("",0,0,e.getMessage());
            raiz.tablaSimbolos.tablaErrores.println("Error en el parser"); */

        }
    }

    public void error_skipto(int kind) {
        ParseException e = generateParseException();  // generate the exception object.
        System.out.println(e.toString());  // print the error message
        Token t;
        int cont=0;
        do {
            t = getNextToken();
        } while (t.kind != kind && t.kind != EOF);
    }

    public void error(ParseException e, tree arbol){

        arbol.tablaSimbolos.tablaErrores.println("Error en el parser, Recuperandose");
        int maxSize = 0;
        for (int i = 0; i < e.expectedTokenSequences.length; i++) {
            if (maxSize < e.expectedTokenSequences[i].length) {
                maxSize = e.expectedTokenSequences[i].length;
            }
            for (int j = 0; j < e.expectedTokenSequences[i].length; j++) {
                int indice=e.expectedTokenSequences[i][j];
                if(e.tokenImage[indice].contains("&")){
                    arbol.tablaSimbolos.tablaErrores.insertErrorSyntax("encuesta",-2,-2,"No se encontr\u00f3 fila de finalizacion");
                }else if(e.tokenImage[indice].contains("_opcion")){
                    arbol.tablaSimbolos.tablaErrores.insertErrorSyntax("encuesta",-2,-2,"No se encontr\u00f3 fila de inicio de grupo/ciclo");
                }else{
                    arbol.tablaSimbolos.tablaErrores.insertErrorSyntax("encuesta",-2,-2,e.getMessage());
                    arbol.tablaSimbolos.tablaErrores.println("Se esperaba:"+e.tokenImage[indice]);

                }


            }
        }
        //System.out.println(e);
    }


    public void println(Object mensaje){
        arbol.tablaSimbolos.tablaErrores.println(mensaje);
    }
    public void print(Object mensaje){
        arbol.tablaSimbolos.tablaErrores.print(mensaje);
    }

    public static void imprimirToken(String t){
        //tablaSimbolos.tablaErrores.println(t);
    }

    /*
    |--------------------------------------------------------------------------
    | GRAMATICA
    |-------------------------------------------------------------------------- 
    */

        /*
        +-------------------------+
        |   Programa
        */
  final public tree Programa(tree arbol) throws ParseException {
    arbol = S(arbol);
    jj_consume_token(0);
     {if (true) return arbol;}
    throw new Error("Missing return statement in function");
  }

        /*
        +-------------------------+
        |   S
        */
  final public tree S(tree arbol) throws ParseException {
    nodeModel encuesta=new nodeModel();
    nodeModel opcion=new nodeModel();
    nodeModel configuracion=new nodeModel();
    jj_consume_token(tEncuesta);
    encuesta = ENCUESTA(arbol);
     arbol.raiz.insertChildren(encuesta);
    jj_consume_token(tOpcion);
    opcion = OPCION(arbol);
    jj_consume_token(tConfiguracion);
    configuracion = CONFIGURACION(arbol);
     {if (true) return arbol;}
    throw new Error("Missing return statement in function");
  }

  final public nodeModel ENCUESTA(tree rama) throws ParseException {
        padreEncuesta  nodo=new padreEncuesta(rama.tablaSimbolos);
        nodeModel temp =new nodeModel();
     rama.tablaSimbolos.tablaErrores.println("ENCUESTA");
    temp = LST_P(rama,nodo);
     {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodeModel OPCION(tree rama) throws ParseException {
    padreOpcion  nodo=new padreOpcion(rama.tablaSimbolos);
        nodeModel temp =new nodeModel();
     rama.tablaSimbolos.tablaErrores.println("OPCION");
    temp = LST_P(rama,nodo);
     {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

  final public nodeModel CONFIGURACION(tree rama) throws ParseException {
        padreConfiguracion  nodo=new padreConfiguracion(rama.tablaSimbolos);
        nodeModel temp =new nodeModel();
     rama.tablaSimbolos.tablaErrores.println("CONFIGURACION");
    temp = LST_P(rama,nodo);
     {if (true) return nodo;}
    throw new Error("Missing return statement in function");
  }

        /*
        +-------------------------+
        |   LST_P2
        */
  final public nodeModel LST_P2(nodeModel nodo,tree arbol) throws ParseException {
    nodeFila child;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tIdentificador:
      child = P2(arbol);
     nodo.insertChildren(child);
      LST_P2(nodo, arbol);
     {if (true) return nodo;}
      break;
    default:
      jj_la1[0] = jj_gen;
      epsilon();
  {if (true) return nodo;}
    }
    throw new Error("Missing return statement in function");
  }

        /*
        +-------------------------+
        |   P2
        */
  final public nodeFila P2(tree arbol) throws ParseException {
    nodeFila nodRetorno=new nodeFila(arbol.tablaSimbolos);
    try {
      jj_consume_token(tIdentificador);
      jj_consume_token(tDosPuntos);
      jj_consume_token(tAbreCorchete);
      LST_ATRIBUTOS(nodRetorno.atrib);
      jj_consume_token(tCierraCorchete);
    } catch (ParseException e) {
        this.error(e, arbol);
    }
     {if (true) return nodRetorno;}
    throw new Error("Missing return statement in function");
  }

    /*
    |--------------------------------------------------------------------------
    | PARA ENCUESTA
    |-------------------------------------------------------------------------- 
    */
        /*
        +-------------------------+
        |   LST_P
        */
  final public nodeModel LST_P(tree arbol, nodeModel nodo) throws ParseException {
    nodeModel child;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tIdentificador:
    case tMenorQue:
      child = P(arbol);
     nodo.insertChildren(child);
      LST_P(arbol, nodo);
     {if (true) return nodo;}
      break;
    default:
      jj_la1[1] = jj_gen;
      epsilon();
     {if (true) return nodo;}
    }
    throw new Error("Missing return statement in function");
  }

        /*
        +-------------------------+
        |   P
        */
  final public nodeModel P(tree arbol) throws ParseException {
    nodePregunta ramaPregunta=new nodePregunta(arbol.tablaSimbolos);
    nodeModelGrupoCiclo rama=new nodeModelGrupoCiclo();
    Token tIdInicio;
    Token tIdFin;

    atributos firstAtrib=new atributos();
    atributos secondAtrib=new atributos();

    nodeModel nod=new nodeModel();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tIdentificador:
        jj_consume_token(tIdentificador);
        jj_consume_token(tDosPuntos);
        jj_consume_token(tAbreCorchete);
        LST_ATRIBUTOS(ramaPregunta.atrib);
        jj_consume_token(tCierraCorchete);
         {if (true) return ramaPregunta;}
        break;
      case tMenorQue:
        jj_consume_token(tMenorQue);
        tIdInicio = jj_consume_token(tIdentificador);
            if(tIdInicio.image.equals("grupo")){
                rama=new nodeGrupo(arbol.tablaSimbolos);
            }else{
                rama=new nodeCiclo(arbol.tablaSimbolos);
            }
        firstAtrib = PQ();
         rama.firstAtrib(firstAtrib,tIdInicio.image);
        nod = LST_P(arbol, rama);
        jj_consume_token(tAmperson);
        tIdFin = jj_consume_token(tIdentificador);
        secondAtrib = PQ();
         rama.secondAtrib(secondAtrib, tIdFin.image);
         {if (true) return rama;}
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
        this.error(e, arbol);
    }
     {if (true) return ramaPregunta;}
    throw new Error("Missing return statement in function");
  }

        /*
        +-------------------------+
        |   PQ
        */
  final public atributos PQ() throws ParseException {
    atributos atr=new atributos();
    jj_consume_token(tGuion);
    jj_consume_token(tMayorQue);
    jj_consume_token(tAbreCorchete);
    LST_ATRIBUTOS(atr);
    jj_consume_token(tCierraCorchete);
     {if (true) return atr;}
    throw new Error("Missing return statement in function");
  }

        /*
        +-------------------------+
        |   LST_ATRIBUTOS
        */
  final public atributos LST_ATRIBUTOS(atributos atr) throws ParseException {
    Token posX;
    Token posY;
    Token key;
    Token value;
    Token ambito;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tMenorQue:
      jj_consume_token(tMenorQue);
      jj_consume_token(tAmbito);
      jj_consume_token(tDosPuntos);
      ambito = jj_consume_token(tIdentificador);
      jj_consume_token(tPosX);
      jj_consume_token(tDosPuntos);
      posX = jj_consume_token(tNumero);
      jj_consume_token(tPosY);
      jj_consume_token(tDosPuntos);
      posY = jj_consume_token(tNumero);
      key = jj_consume_token(tIdentificador);
      value = jj_consume_token(tString);
      jj_consume_token(tIdentificador);
      jj_consume_token(tMayorQue);
            atr.insert(key.image, ambito.image,value.image,posX.image, posY.image);
      LST_ATRIBUTOS(atr);
          {if (true) return atr;}
      break;
    default:
      jj_la1[3] = jj_gen;
      epsilon();
     {if (true) return atr;}
    }
    throw new Error("Missing return statement in function");
  }

        /*
        +-------------------------+
        |   epsilon
        */
  final public void epsilon() throws ParseException {
        this.imprimirToken("epsilon");
  }

  /** Generated Token Manager. */
  public parserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x900,0x900,0x800,};
   }

  /** Constructor with InputStream. */
  public parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new parserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new parserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public parser(parserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(parserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[26];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 26; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
