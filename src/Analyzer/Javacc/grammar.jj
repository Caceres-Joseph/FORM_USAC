options {
    STATIC = false ;
}
    /*
    |--------------------------------------------------------------------------
    | METODOS
    |-------------------------------------------------------------------------- 
    */

PARSER_BEGIN(parser) 
package Analyzer.Javacc; 
import java.io.InputStream; 
import Analyzer.Tree.*;
import Analyzer.Tree.Tablas.tablaSimbolos;
import Analyzer.Tree.Nodes.*;
public class parser {
    public tablaSimbolos tablaSimbolos=new tablaSimbolos();
    public tree raiz=new tree();
    
    public parser(){
    
    }

    public void inicializar(InputStream stream ){
        try{
                
                parser analizador =new parser(stream);
                
                analizador.Programa(raiz); 
                
                System.out.println("Analisis  exitoso! :)");
            }
        catch(ParseException e){
            tablaSimbolos.tablaErrores.insertErrorSemantic(0,0,e.getMessage());
            tablaSimbolos.tablaErrores.println("Error en el parser");
            
        }
    }

    public void error_skipto(int kind) { 
        ParseException e = generateParseException();  // generate the exception object.
        System.out.println(e.toString());  // print the error message
        Token t;
        int cont=0;
        do {
            t = getNextToken();   
        } while (t.kind != kind && t.kind != EOF);  
    }

    public void error(ParseException e){ 
        tablaSimbolos.tablaErrores.println("Error en el parser, Recuperandose");
        int maxSize = 0;
        for (int i = 0; i < e.expectedTokenSequences.length; i++) {
            if (maxSize < e.expectedTokenSequences[i].length) {
                maxSize = e.expectedTokenSequences[i].length;
            }
            for (int j = 0; j < e.expectedTokenSequences[i].length; j++) {
                int indice=e.expectedTokenSequences[i][j];
                System.out.println("Se esperaba:"+e.tokenImage[indice]);
 
            } 
        }
        //System.out.println(e);
    }


    public void println(Object mensaje){
        this.tablaSimbolos.tablaErrores.println(mensaje);
    }
    public void print(Object mensaje){
        this.tablaSimbolos.tablaErrores.print(mensaje);
    }

    public static void imprimirToken(String t){
        //tablaSimbolos.tablaErrores.println(t);
    }
} 

PARSER_END(parser)

    /*
    |--------------------------------------------------------------------------
    | TOKENS
    |-------------------------------------------------------------------------- 
    */


        /*
        +-------------------------+
        |   Palabra Reservada
        */

TOKEN :
{
        <tPosX          : "posX">
            {parser.imprimirToken("tPosX"+image);}
    |   <tPosY          : "posY">
            {parser.imprimirToken("tPosY"+image);}


    |   <tOpcion        : "_opcion">
            {parser.imprimirToken("tOpcion"+image);}
    |   <tEncuesta        : "_encuesta">
            {parser.imprimirToken("tEncuesta"+image);}
    |   <tConfiguracion        : "_configuracion">
            {parser.imprimirToken("tConfiguracion"+image);}        

}

        /*
        +-------------------------+
        |   Identificadores
        */

TOKEN : 
{
        <tNumero: (["0"-"9"])+ >
            {parser.imprimirToken("NUMERO->"+image);}
}

TOKEN : {
        <tIdentificador: <tLetra>(<tLetra>|<tNumero>|"_")*>
            {parser.imprimirToken("Identificador->"+image);}
    |   <#tLetra: (["a"-"z","A"-"Z"])> 
}


        /*
        +-------------------------+
        |   Simbolos
        */

TOKEN :
{
         <tMayorQue      : ">" >
            {parser.imprimirToken("tMayorQue->"+image);}
    |    <tMenorQue      : "<" >
            {parser.imprimirToken("tMenorQue->"+image);}

    |    <tDosPuntos      : ":" >
            {parser.imprimirToken("tDosPntos->"+image);}
    
    |    <tComa      : "," >
            {parser.imprimirToken("tComa->"+image);}

    |    <tAmperson      : "&" >
            {parser.imprimirToken("tAmperson->"+image);}

    |    <tAbreCorchete   : "[" >
            {parser.imprimirToken("tAbreCorchete->"+image);}
    |    <tCierraCorchete : "]" >
            {parser.imprimirToken("tCierraCorchete->"+image);}
    |    <tGuion : "-" >
            {parser.imprimirToken("tGuion->"+image);}
         
}





        /*
        +-------------------------+
        |   SKIP
        */


SKIP    : { " " }
SKIP    : { "\n" | "\r" | "\r\n" }
SKIP   : { 
    <OTHER:   ~[]>{/* this.imprimirToken("TokenDesconocido->"+image); */}
}


        /*
        +-------------------------+
        |   Cadena
        */

 
MORE : {
    <inicio : "/>" > :s2
}

<s2> MORE :
{
    <cual : (~[])>
}
<s2> TOKEN :
{
    <tString : "</"  >{parser.imprimirToken("tString->"+image); } : DEFAULT
}






    /*
    |--------------------------------------------------------------------------
    | GRAMATICA
    |-------------------------------------------------------------------------- 
    */

        /*
        +-------------------------+
        |   Programa
        */

tree Programa(tree rama):
{
tree retorno;
}
{
    retorno=S(rama) 
    < EOF > 
    {return retorno;}
}

        /*
        +-------------------------+
        |   S
        */

tree S(tree rama):
{
tree retorno=rama;
}
{

    <tEncuesta>
    ENCUESTA(rama) 
    <tOpcion>
    OPCION(rama) 
    <tConfiguracion>
    CONFIGURACION(rama) 

    {return rama;}
     
}


void ENCUESTA(tree rama):
{
        padreOpcion  nodo=new padreOpcion();
}
{
    {tablaSimbolos.tablaErrores.println("ENCUESTA");}
    LST_P(rama) 
}


void OPCION(tree rama):
{ 
    padreOpcion  nodo=new padreOpcion();
}
{
    {tablaSimbolos.tablaErrores.println("OPCION");}
    LST_P2(nodo) 
    /* {nodo.imprimir();} */

}


void CONFIGURACION(tree rama):
{
        padreOpcion  nodo=new padreOpcion();
}
{       
    {tablaSimbolos.tablaErrores.println("CONFIGURACION");}
    LST_P2(nodo)
    /* {nodo.imprimir();} */
    |
    epsilon() 
}

        /*
        +-------------------------+
        |   LST_P2
        */

nodeModel LST_P2(nodeModel nodo):
{
    nodeFila child;
}
{
    child=P2()
    {nodo.insertChildren(child);}

    LST_P2(nodo) 
    
    {return nodo;}
    | 
    epsilon()
 {return nodo;}
}

        /*
        +-------------------------+
        |   P
        */

nodeFila P2():
{
    nodeFila nodRetorno=new nodeFila();
}
{
    try{
         
        <tIdentificador> 
 
        <tDosPuntos>
        <tAbreCorchete>

        nodRetorno.atrib=LST_ATRIBUTOS(nodRetorno.atrib)
        
        <tCierraCorchete> 

    }catch(ParseException e){
        this.error(e);
    }

    {return nodRetorno;}

}

    /*
    |--------------------------------------------------------------------------
    | PARA ENCUESTA
    |-------------------------------------------------------------------------- 
    */
        /*
        +-------------------------+
        |   LST_P
        */

void LST_P(tree rama):
{

}
{
    P(rama)
    LST_P(rama)
    |
    epsilon()
}

        /*
        +-------------------------+
        |   P
        */

void P(tree rama):
{
    atributos atr=new atributos(); 

    
}
{
    try{
         
        <tIdentificador> 
 
        <tDosPuntos>
        <tAbreCorchete>

        LST_ATRIBUTOS(atr)
        
        <tCierraCorchete>
        |
        <tMenorQue>
        <tIdentificador>  
        PQ()
        
        LST_P(rama)
        

        <tAmperson>
        <tIdentificador>  
        PQ()
    }catch(ParseException e){
        this.error(e);
    }

}

        /*
        +-------------------------+
        |   PQ
        */

void PQ():
{

    atributos atr=new atributos();
}
{
    <tGuion>
    <tMayorQue>
    <tAbreCorchete>

    LST_ATRIBUTOS( atr)
    {/* atr.imprimir(); */}
    <tCierraCorchete>
}

        /*
        +-------------------------+
        |   LST_ATRIBUTOS
        */

atributos LST_ATRIBUTOS(atributos atr):
{ 
    Token posX;
    Token posY;
    Token key;
    Token value;
}
{
    
        <tMenorQue>
        
        <tPosX>
        <tDosPuntos>
        posX=<tNumero>
        
        <tPosY>
        <tDosPuntos>
        posY=<tNumero>

        key=<tIdentificador>

        value=<tString>
        
        <tIdentificador>
        <tMayorQue>
        {
            atr.insert(key.image,value.image,posX.image, posY.image);
        }
        LST_ATRIBUTOS(atr)
         {return atr;}
        |
        epsilon()
    {return atr;}
}



        /*
        +-------------------------+
        |   epsilon
        */

void epsilon () : 
{

} 
{  
    {
        this.imprimirToken("epsilon");
    } 
}