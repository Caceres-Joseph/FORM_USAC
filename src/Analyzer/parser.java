/* Generated By:JavaCC: Do not edit this line. parser.java */
package Analyzer;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

public class parser implements parserConstants {

    public parser(){

    }

    public void inicializar(String entrada){
        try{
                //File initialFile = new File("src/main/resources/sample.txt");
                //InputStream targetStream = new FileInputStream(initialFile);
                String exampleString=entrada;
                InputStream stream = new ByteArrayInputStream(exampleString.getBytes(StandardCharsets.UTF_8));
                parser analizador =new parser(stream);
                int resultado = analizador.Programa();
                System.out.println(resultado);
                System.out.println("Analisis con exito");
            }
        catch(ParseException e){
            System.out.println(e.getMessage());
            System.out.println("Se han econtrado errores");
        }
    }

    public void error_skipto(int kind) {
        System.out.println("Entro a skip to");
        ParseException e = generateParseException();  // generate the exception object.
        System.out.println(e.toString());  // print the error message
        Token t;
        int cont=0;
        do {
            cont ++;
            t = getNextToken();
            System.out.println("Entro a skip to");

            if(cont==200){
                System.out.println("No se pudo recuperar");
                break;
            }
        } while (t.kind != kind);
            // The above loop consumes tokens all the way up to a token of
            // "kind".  We use a do-while loop rather than a while because the
            // current token is the one immediately before the erroneous token
            // (in our case the token immediately before what should have been
            // "if"/"while".
    }

/* Token CADENA():
{
    String salida="";
    Token t;
}
{
    <tComillaDoble>
    {
        do{
            t=getNextToken();
            if(t.kind!=XLSParserConstants.tComillaDoble){
                salida +=t.image;
            }
        }while(t.kind != XLSParserConstants.tComillaDoble);
        t.image=salida;
        System.out.prinln(salida);
        return t;
    }
} */
  final public int Programa() throws ParseException {
    main();
    jj_consume_token(0);
     {if (true) return 0;}
    throw new Error("Missing return statement in function");
  }

  final public void main() throws ParseException {
    try {
      lstSumas();
    } catch (ParseException e) {
        System.out.println("error alv :(");
    }
  }

  final public void lstSumas() throws ParseException {
    label_1:
    while (true) {
      try {
        lstNumeros();
        jj_consume_token(tPuntoComa);
        jj_consume_token(QUOTED_STRING);
      } catch (ParseException e) {
            System.out.println("Errores 2");
            error_skipto(tPuntoComa);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMERO:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
  }

  final public void lstNumeros() throws ParseException {
    jj_consume_token(NUMERO);
    lstNumerosP();
  }

  final public void lstNumerosP() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tMas:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(tMas);
      jj_consume_token(NUMERO);
    }
  }

  final public void epsilon() throws ParseException {
        System.out.println("epsilon");
  }

  /** Generated Token Manager. */
  public parserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2,0x10,};
   }

  /** Constructor with InputStream. */
  public parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new parserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new parserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public parser(parserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(parserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[12];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 2; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 12; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  //public static void main(String args[]) throws ParseException {  
  //} 
}
